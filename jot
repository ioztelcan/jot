#!/usr/bin/env node

const args = process.argv
const chalk = require('chalk');
const readline = require('readline');
const low = require('lowdb')
const FileSync = require('lowdb/adapters/FileSync')

const jot_db_file = process.env.HOME + "/.jot/jot-db.json"

//const adapter = new FileSync('jot-db.json')
const adapter = new FileSync(jot_db_file)
const db = low(adapter)

// Database default fields.
db.defaults({notes: []}).write()

function usage() {

	const usage_text = `
	usage:
  		jot <command> OR jot <short note>

  	valid commands:

  	long:     		use this to save a longer note
  	get <id> OR get:	use without [note_id] to get all notes
  	help:			used to print the usage guide
	`
	console.log(usage_text)
}

function log_err(msg) {
	console.log(chalk.red(msg))
}

function log_warn(msg) {
	console.log(chalk.yellow(msg))
}

function log_success(msg) {
	console.log(chalk.green(msg))
}

// Returns datetime string and the timestamp to be used as the note id.
function get_time() {
	let date = new Date()
	return [date.toLocaleString(), date.getTime()]
}

function new_note(input) {
	let text = ""
	
	input.forEach((item, index) => {
		text += item + " "
	})

	datetime = get_time()

	db.get('notes').push({
		id: datetime[1],
		timestamp: datetime[0],
		note: text
	}).write()
	
	log_success("Saved note " + datetime[1])
}

function new_long_note() {
	const rl = readline.createInterface({
  		input: process.stdin,
  		output: process.stdout
	})

	console.log(chalk.blue("Write your piece then Ctrl + C:"))
	let text = ''

	rl.on('line', (input) => {
  		text += input + "\n"	
	})

	rl.on('SIGINT', () => {
		datetime = get_time()
		db.get('notes').push({
			id: datetime[1],
			timestamp: datetime[0],
			note: text
		}).write()
		rl.close()
		log_success("Saved note " + datetime[1])
	});
}

function get_all_notes() {

	const notes = db.get('notes').value()

	notes.forEach(note => {
		console.log(chalk.green(`${note.id}`), 
			    chalk.blue(`${note.timestamp}`),
			    " : ",
			    `${note.note}`)
	})
}

function get_node_by_id(id) {
	let found = false
	let found_note = []

	const notes = db.get('notes').value()
	notes.forEach(note => {
		if (id == note.id) {
			found = true
			found_note = note
		}
	})

	if (found) {
		console.log("---------------------")
		console.log(`${found_note.note}`,"\n")
		console.log(chalk.green(`${found_note.id}`))
		console.log(chalk.blue(`${found_note.timestamp}`))
		console.log("---------------------")
	
	} 
	else {
		log_err("Could not find note " + id)
	}
}

function delete_note(id_in) {
	let note = db.get('notes')
		.remove({id: parseInt(id_in)})
		.write()

	if (note.length != 0) {
		log_warn("Deleted note " + id_in)
	}
	else {
		log_err("Could not find note " + id_in)
	}
}


//// MAIN 

switch (args[2]) {
	case 'help':
	case '-h':
	case '--help':	
		usage()
		break
	// TODO: Enable later
	//case 'long':
	//	new_long_note()
	//	break
	case 'list':
	case 'ls':
		get_all_notes()
		break
	case 'get':
		get_node_by_id(args[3])
		break
	case 'rm': 
		delete_note(args[3])
		break
	default: 
		// Saves the passed string as a note.
		if (args.length > 2) {
			if (args.length <= 102) {
				args.splice(0,2)
				new_note(args)
			}	
		} 
		else {
			usage()
		}
}
